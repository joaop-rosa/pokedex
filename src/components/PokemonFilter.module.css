.inputText {
  position: relative;
  width: 100%;
  max-width: 900px;
  padding: 16px;
  font-size: 18px;
  text-align: center;
  border: none;
  border-bottom: solid 2px var(--black);
}

.filtersWrapper {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  max-width: 900px;
}

.buttonOpenFilters {
  background-color: var(--black);
  color: var(--white);
  padding: 9px 0;
  font-size: 17px;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  cursor: pointer;
  clip-path: polygon(0 0, 100% 0, 95% 100%, 5% 100%);
  width: 100%;
}

.filters {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  max-height: 0px;
  overflow: hidden;
  width: 100%;
  transition: all 0.5s ease;
  background: var(--dove-gray);
  border-left: solid 2px var(--black);
  border-right: solid 2px var(--black);
  padding: 0;
}

.filtersOpen {
  max-height: 1000px;
  padding: 30px 15px;
}

.generationWrapper {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
  gap: 15px;
  width: 100%;
}

.generation {
  width: 140px;
  padding: 12px 0;
  border-radius: 10px;
  font-size: 14px;
  font-weight: 700;
  cursor: pointer;
  background-color: var(--black);
  color: var(--white);
  border: solid 2px var(--black);
  gap: 5px;
}

.generation:hover,
.generationSelected {
  background-color: var(--white);
  color: var(--black);
  border: solid 2px var(--black);
}

.typesFilterWrapper {
  margin-bottom: 30px;
  max-width: 900px;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
  width: 100%;
  gap: 15px;
}

.buttonTypeFilter {
  padding: 10px 0;
  width: 120px;
  border-radius: 10px;
  font-size: 16px;
  font-weight: 700;
  cursor: pointer;
  border: solid 3px var(--black);
  gap: 5px;
}

.buttonTypeFilter:hover {
  box-shadow: 0px 0px 5px 1px inset var(--black);
}

.buttonTypeFilterSelected {
  border-color: var(--white);
}

.poisonType {
  composes: poisonType from global;
}

.rockType {
  composes: rockType from global;
}

.fireType {
  composes: fireType from global;
}

.normalType {
  composes: normalType from global;
}

.waterType {
  composes: waterType from global;
}

.grassType {
  composes: grassType from global;
}

.flyingType {
  composes: flyingType from global;
}

.fightingType {
  composes: fightingType from global;
}

.electricType {
  composes: electricType from global;
}

.groundType {
  composes: groundType from global;
}

.psychicType {
  composes: psychicType from global;
}

.iceType {
  composes: iceType from global;
}

.bugType {
  composes: bugType from global;
}

.ghostType {
  composes: ghostType from global;
}

.steelType {
  composes: steelType from global;
}

.dragonType {
  composes: dragonType from global;
}

.darkType {
  composes: darkType from global;
}

.fairyType {
  composes: fairyType from global;
}

@media screen and (max-width: 480px) {
  .typesFilterWrapper {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
  }

  .buttonTypeFilter {
    border-radius: 10px;
    font-size: 14px;
    width: unset;
  }
}

@media screen and (max-width: 380px) {
  .buttonTypeFilter {
    font-size: 12px;
  }
}

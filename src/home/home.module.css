.sectionHome {
  position: relative;
  background-color: #6498ff;
  margin: 0 auto;
}

.container {
  padding: 130px 30px 0;
  max-width: 1280px;
  width: 100%;
  margin: 0 auto;
  display: flex;
  flex-direction: column;
  align-items: center;
  min-height: 100vh;
  padding-bottom: 50px;
}

.header {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 100px;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
  z-index: 1;
  background: whitesmoke;
  color: yellow;
  -webkit-text-stroke: 1px #3761a8;
  font-family: pokemon;
  font-size: 24px;
}

.inputText {
  position: relative;
  margin-bottom: 30px;
  width: 100%;
  max-width: 500px;
  height: 40px;
  padding: 10px 15px;
  font-size: 18px;
}

.pokemonList {
  width: 100%;
  justify-content: center;
  display: grid;
  grid-template-columns: repeat(auto-fit, 300px);
  grid-template-rows: repeat(auto-fit, 300px);
  gap: 30px;
  padding-bottom: 20px;
}

.filtersWrapper {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.buttonOpenFilters {
  background-color: var(--black);
  color: var(--white);
  padding: 10px 30px;
  font-size: 18px;
  border-radius: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  cursor: pointer;
}

.filters {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  max-height: 0px;
  overflow: hidden;
  width: 100%;
  transition: all 0.5s ease;
  margin-top: 30px;
  margin-bottom: 30px;
}

.filtersOpen {
  max-height: 1000px;
}

.generationWrapper {
  margin-bottom: 30px;
  max-width: 900px;
  display: grid;
  justify-content: center;
  align-items: center;
  grid-template-columns: repeat(auto-fill, minmax(100px, 120px));
  gap: 15px;
  width: 100%;
}

.generation {
  padding: 10px 0;
  border-radius: 30px;
  font-size: 16px;
  font-weight: 700;
  cursor: pointer;
  background-color: var(--black);
  color: var(--white);
  border: solid 2px var(--black);
  gap: 5px;
}

.generation:hover,
.generationSelected {
  background-color: var(--white);
  color: var(--black);
  border: solid 2px var(--black);
}

.typesFilterWrapper {
  margin-bottom: 30px;
  max-width: 900px;
  display: grid;
  justify-content: center;
  align-items: center;
  grid-template-columns: repeat(auto-fill, minmax(100px, 120px));
  width: 100%;
  gap: 15px;
}

.buttonTypeFilter {
  padding: 10px 0;
  border-radius: 30px;
  font-size: 16px;
  font-weight: 700;
  cursor: pointer;
  border: solid 3px var(--black);
  gap: 5px;
}

.buttonTypeFilterSelected {
  border-color: var(--white);
}

.listEmpty {
  width: 100%;
  font-size: 22px;
  font-weight: 700;
  text-align: center;
  padding: 0 0 50px;
  margin: 10px auto 0;
}

.pikachuNotFound {
  padding-top: 50px;
  width: 100%;
  max-width: 150px;
  margin: 0 auto;
}

.buttonToTop {
  position: fixed;
  width: 100px;
  height: 100px;
  bottom: 50px;
  right: 5vh;
  border-radius: 50px;
  background-color: var(--white);
  cursor: pointer;
}

.buttonToTop:hover .arrowUp {
  animation: pulse 1s infinite ease-in-out alternate;
}

@keyframes pulse {
  from {
    transform: scale(0.8);
  }
  to {
    transform: scale(1.1);
  }
}

.poisonType {
  composes: poisonType from global;
}

.rockType {
  composes: rockType from global;
}

.fireType {
  composes: fireType from global;
}

.normalType {
  composes: normalType from global;
}

.waterType {
  composes: waterType from global;
}

.grassType {
  composes: grassType from global;
}

.flyingType {
  composes: flyingType from global;
}

.fightingType {
  composes: fightingType from global;
}

.electricType {
  composes: electricType from global;
}

.groundType {
  composes: groundType from global;
}

.psychicType {
  composes: psychicType from global;
}

.iceType {
  composes: iceType from global;
}

.bugType {
  composes: bugType from global;
}

.ghostType {
  composes: ghostType from global;
}

.steelType {
  composes: steelType from global;
}

.dragonType {
  composes: dragonType from global;
}

.darkType {
  composes: darkType from global;
}

.fairyType {
  composes: fairyType from global;
}
